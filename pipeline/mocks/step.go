// Code generated by mockery v2.32.0. DO NOT EDIT.

package pipelinemocks

import (
	context "context"

	pipeline "github.com/carlosrodriguesf/go-toolkit/pipeline"
	mock "github.com/stretchr/testify/mock"
)

// Step is an autogenerated mock type for the Step type
type Step[T interface{}] struct {
	mock.Mock
}

// Name provides a mock function with given fields:
func (_m *Step[T]) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Run provides a mock function with given fields: _a0, _a1, _a2
func (_m *Step[T]) Run(_a0 context.Context, _a1 T, _a2 pipeline.Next[T]) (T, error) {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, T, pipeline.Next[T]) (T, error)); ok {
		return rf(_a0, _a1, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, T, pipeline.Next[T]) T); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(T)
	}

	if rf, ok := ret.Get(1).(func(context.Context, T, pipeline.Next[T]) error); ok {
		r1 = rf(_a0, _a1, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStep creates a new instance of Step. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStep[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *Step[T] {
	mock := &Step[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
